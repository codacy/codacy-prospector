[
  {
    "patternId": "bandit",
    "title": "Bandit tool",
    "description": "Bandit finds common security issues in Python code.",
    "timeToFix": 5
  },
  {
    "patternId": "dodgy",
    "title": "dodgy tool",
    "description": "Dodgy is a very simple tool designed to find ‘dodgy’ things which should not be in a public project, such as secret keys, passwords, AWS tokens or source control diffs.",
    "timeToFix": 5
  },
  {
    "patternId": "mccabe",
    "title": "mccabe tool",
    "description": "McCabe or cyclomatic complexity is a measurement of how many paths there are in a given function or method. It measures how complicated your functions are, and warns if they reach a certain threshold. Methods that are too complex are prone to logic errors, and should be refactored to a series of smaller methods.",
    "timeToFix": 5
  },
  {
    "patternId": "mypy",
    "title": "mypy tool",
    "description": "Mypy is an experimental optional static type checker for Python that aims to combine the benefits of dynamic (or “duck”) typing and static typing. Mypy combines the expressive power and convenience of Python with a powerful type system and compile-time type checking.",
    "timeToFix": 5
  },
  {
    "patternId": "profile-validator",
    "title": "profile-validator tool",
    "description": "This is a simple tool built in to prospector which validates prospector profiles.",
    "timeToFix": 5
  },
  {
    "patternId": "pycodestyle",
    "title": "pycodestyle tool",
    "description": "pycodestyle is a simple tool to warn about violations of the PEP8 style guide. It produces messages for any divergence from the style guide.",
    "timeToFix": 5
  },
  {
    "patternId": "pydocstyle",
    "title": "pydocstyle tool",
    "description": "Pydocstyle is a simple tool to warn about violations of the PEP257 Docstring Conventions. It produces messages for any divergence from the style guide.",
    "timeToFix": 5
  },
  {
    "patternId": "pyflakes",
    "title": "pyflakes tool",
    "description": "Pyflakes analyzes programs and detects various errors. It is simpler and faster than pylint, but also not as thorough.",
    "timeToFix": 5
  },
  {
    "patternId": "pylint",
    "title": "Pylint tool",
    "description": "Pylint is the most comprehensive static analysis tool for Python. It is extremely thorough and is the source of most messages that prospector outputs.",
    "timeToFix": 5
  },
  {
    "patternId": "pyright",
    "title": "pyright tool",
    "description": "Pyright is a full-featured, standards-based static type checker for Python. It is designed for high performance and can be used with large Python source bases.",
    "timeToFix": 5
  },
  {
    "patternId": "pyroma",
    "title": "pyroma tool",
    "description": "Pyroma is a tool to check your setup.py to ensure it is following best practices of the Python packaging ecosystem. It will warn you if you are missing any package metadata which would improve the quality of your package. This is recommended if you intend to publish your code on PyPI.",
    "timeToFix": 5
  },
  {
    "patternId": "vulture",
    "title": "vulture tool",
    "description": "Vulture finds unused classes, functions and variables in your code. This could be useful if your project is an application rather than a library, however, if you do a lot of dynamic access or metaprogramming, Vulture will likely warn about unused code that is in fact used.",
    "timeToFix": 5
  },
  {
    "patternId": "ruff",
    "title": "ruff tool",
    "description": "Ruff is a high-performance Python linter designed as a drop-in replacement for Flake8, Black, isort, pydocstyle, pyupgrade, autoflake, and other plugins, while running faster than any single tool. Optimized for speed and efficiency, it is well-suited for large codebases.",
    "timeToFix": 5
  }
]
